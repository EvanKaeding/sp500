?geom_bar
ggplot(data = sum, mapping = aes(x = gics_sector)) + geom_bar()
ggplot(data = sum) + geom_bar(x = gics_sector, y = count))
ggplot(data = sum) + geom_bar(x = gics_sector, y = count)
ggplot(data = sum, mapping = aes(x = gics_sector)) + geom_bar()
ggplot(data = sum, mapping = aes(x = gics_sector, fill = count)) + geom_bar()
ggplot(data = sum, mapping = aes(x = gics_sector, fill = count)) + geom_col()
?geom_col
ggplot(data = sum, mapping = aes(x = gics_sector, y = count)) + geom_col()
?ggplot
ggplot(data = sum, mapping = aes(x = gics_sector, y = count)) + geom_col() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
?theme
?heatmap
?read.csv
read.csv("linkedin-data.csv", skip = 6, stringsAsFactors = FALSE)
setwd("~/Projects/linkedin-heatmap")
d <- read.csv("linkedin-data.csv", skip = 6, stringsAsFactors = FALSE)
View(d)
d <- read.csv("linkedin-data.csv", skip = 5, stringsAsFactors = FALSE)
hist(d$Impressions)
library(tidyverse)
c <- select(d, Campaign.ID, Ad.ID, Impressions, Clicks, Conversions, Total.Spent)
c <- mutate(c, ctr = Clicks/Impressions, Conversion.Rate = Conversions/Clicks)
c <- mutate(c, ctr = Clicks/Impressions * 100, Conversion.Rate = Conversions/Clicks)
c <- mutate(c, ctr = Clicks/Impressions, Conversion.Rate = Conversions/Clicks)
?barplot
?geom_col
View(c)
sum(c$Total.Spent)
class(d$Start.Date..UTC.time.zone.)
d$Start.Date..UTC.time.zone.[1]
mdy(d$Start.Date..UTC.time.zone.)
library(lubridate)
mdy(d$Start.Date..UTC.time.zone.)
mutate(c, Start.Date = mdy(d$Start.Date..UTC.time.zone.))
c <- mutate(c, Start.Date = mdy(d$Start.Date..UTC.time.zone.))
ggplot(c, aes(Start.Date, Total.Spent)) + geom_col()
ggplot(c, aes(Ad.ID, ctr)) + geom_col()
b <- group_by(c, Ad.ID)
ggplot(b, aes(ctr, Impressions)) + geom_point()
ggplot(c, aes(Start.Date, ctr)) + geom_col()
ggplot(c, aes(Ad.ID, Impressions)) + geom_col()
b
summarise_each(b, funs = sum)
summarise_each(b, funs(sum))
b %>%
group_by(Ad.ID) %>%
summarise_each(funs(sum)) %>%
arrange(desc(Impressions)) %>%
ggplot(aes(Ad.ID, Impressions)) + geom_col()
?heatmap
heatmap(c, Rowv = Ad.ID, Colv = NA)
m <- as.matrix(x)
m <- as.matrix(c)
heatmap(c, Rowv = Ad.ID, Colv = NA)
heatmap(m, Rowv = Ad.ID, Colv = NA)
str(m)
n <- gather(c, Ad.ID:Conversion.Rate)
n <- select(c, Ad.ID:Conversion.Rate)
n <- data.frame(n)
View(n)
View(n)
row.names(n) <- n$Ad.ID
row.names(n) <- nrow(n)
row.names(n) <- 1:nrow(n)
m <- as.matrix(n)
m <- [,2:7]
m <- m[,2:7]
class(m)
heatmap(m)
heatmap(m, col = cm.colors(256), scale="column", margins=c(5,10)))
heatmap(m, col = cm.colors(256), scale="column", margins=c(5,10))
heatmap(m, Rowv=NA, Colv=NA, col = cm.colors(256), scale="column", margins=c(5,10))
heatmap(m, Rowv=NA, Colv=NA, col = cm.colors(256), scale="column", margins=c(5,12)
)
heatmap(m, Rowv=NA, Colv=NA, col = cm.colors(256), scale="column", margins=c(7,12))
heatmap(m, Rowv=NA, Colv=NA, col = heat.colors(256), scale="column", margins=c(7,12))
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
View(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(pp)
boxplot(ppm)
boxplot(ppm, col = "blue")
abline(h = 12)
hist(ppm, col = "green")
rug(ppm)
rug(low)
low
high
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline(v = 12, lwd, = 2)
abline(v = 12, lwd = 2)
abline(v = 12, lwd = 2, col = "magenta")
abline(v = 12, col = "magenta",lwd = 2)
abline(v = median(ppm), col = "magenta", lwd = 4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25~region, data = pollution, col = "red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollution, region == "east")
head(east)
hist(east$pm25, col = "green")
hist(subset(pollution, region == "west"), col = "green")
hist(subset(pollution, region == "west")[1], col = "green")
?subset
hist(subset(pollution, region == "west", select = pm25), col = "green")
c <- subset(pollution, region == "west", select = pm25)
hist(subset(pollution, region == "west", select = pm25), col = "green")
hist(subset(pollution, region == "west")$pm25, col = "green")
with(pollution, plot(latitude, pm25))
with(pollution, plot(latitude, pm25, lwd = 2, lty = 2))
with(pollution, plot(latitude, pm25))
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, pollution$ppm, col = pollution$region)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h = 12, lwd = 2, lty = 2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
setwd("~/Projects/coursera-data-science/exploratory-analysis/week-1/ExData_Plotting1")
download.file(url = https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip)
download.file(url = "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip")
download.file(url = "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip", destfile = "household_power_consumption.zip")
devtools::install_github('daroczig/fbRads')
library(httr)
app <- oauth_app('facebook', '255943561563143', 'afe8816a863156d12b9ad172188bea92')
Sys.setenv('HTTR_SERVER_PORT' = '1410/')
tkn <- oauth2.0_token(
oauth_endpoints('facebook'), app, scope = 'business_management',
type = 'application/x-www-form-urlencoded', cache = FALSE)
install.packages("httpuv")
tkn <- oauth2.0_token(
oauth_endpoints('facebook'), app, scope = 'business_management',
type = 'application/x-www-form-urlencoded', cache = FALSE)
tkn <- jsonlite::fromJSON(names(tkn$credentials))$access_token
tkn <- oauth2.0_token(
oauth_endpoints('facebook'), app, scope = 'business_management',
type = 'application/x-www-form-urlencoded', cache = FALSE)
tkn <- oauth2.0_token(
oauth_endpoints('facebook'), app, scope = 'business_management',
type = 'application/x-www-form-urlencoded', cache = FALSE)
?oauth2.0_token
Sys.setenv("HTTR_SERVER_PORT" = "1410/")
tkn <- oauth2.0_token(
oauth_endpoints('facebook'), app, scope = 'business_management',
type = 'application/x-www-form-urlencoded', cache = FALSE)
tkn <- oauth2.0_token(
oauth_endpoints('facebook'), app, scope = 'business_management',
type = 'application/x-www-form-urlencoded', cache = FALSE)
?read.file
?read.table()
setwd("~/Projects/coursera-data-science/exploratory-analysis/week-1/ExData_Plotting1")
pwr <- read.table("household_power_consumption.txt", stringsAsFactors = FALSE)
head(pwr, 10)
?view
?View
pwr <- read.table("household_power_consumption.txt", header = FALSE, sep = ";", stringsAsFactors = FALSE)
pwr <- read.table("household_power_consumption.txt", header = TRUE, sep = ";", stringsAsFactors = FALSE)
head(pwr)
?strptime()
pwr$Date[1]
as.Date(pwr$Date[1])
library(lubridate)
dmy(pwr$Date[1])
library(dplyr)
pwr$Date <- dmy(pwr$Date)
class(pwr$Date)
head(pwr, 5)
data <- subset(pwr, pwr$Date == "2007-02-01" || "2007-02-02")
class("2007-02-02")
g <- ymd("2007-02-01")
h <- ymd("2007-02-02")
data <- subset(pwr, pwr$Date == g || h)
head(data)
?subset
data <- subset(pwr, Date == g || h)
data <- subset(pwr, Date == g | h)
data <- filter(pwr, Date == g | h)
pwr <- read.table("household_power_consumption.txt",
header = TRUE, sep = ";",
stringsAsFactors = FALSE)
head(pwr)
data <- filter(pwr, Date == "01-02-2007" | "02-02-2007")
data1 <- filter(pwr, Date == "01-02-2007")
class("01-02-2007")
class(pwr$Date[1])
pwr$Date[1]
data1 <- filter(pwr, Date == "01/02/2007")
data1 <- filter(pwr, Date == "1/2/2007")
data2 <- filter(pwr, Data == "2/2/2007")
data2 <- filter(pwr, Date == "2/2/2007")
?rbind
data <- bind_rows(data1, data2)
data$Date <- dmy(data$Date)
head(data$Date)
names(data)
with(data, hist(Global_active_power))
class(data$Global_active_power)
set <- bind_rows(data1, data2)
set$Date <- dmy(data$Date)
set$Date <- dmy(set$Date)
data1 <- filter(pwr, Date == "1/2/2007")
data2 <- filter(pwr, Data == "2/2/2007")
data2 <- filter(pwr, Date == "2/2/2007")
set <- bind_rows(data1, data2)
set$Date <- dmy(set$Date)
pwr <- read.table("household_power_consumption.txt",
header = TRUE, sep = ";",
stringsAsFactors = FALSE, na.strings = "?")
data1 <- filter(pwr, Date == "1/2/2007")
data2 <- filter(pwr, Date == "2/2/2007")
set <- bind_rows(data1, data2)
set$Date <- dmy(set$Date)
pwr <- read.table("household_power_consumption.txt",
header = TRUE, sep = ";",
stringsAsFactors = FALSE, na.strings = "?")
pwr <- read.table("household_power_consumption.txt",
header = TRUE, sep = ";",
stringsAsFactors = FALSE, na.strings = "?")
setwd("~/Projects/coursera-data-science/exploratory-analysis/week-1/ExData_Plotting1")
pwr <- read.table("household_power_consumption.txt",
header = TRUE, sep = ";",
stringsAsFactors = FALSE, na.strings = "?")
data1 <- filter(pwr, Date == "1/2/2007")
data2 <- filter(pwr, Date == "2/2/2007")
data1 <- filter(pwr, Date == "1/2/2007")
head(pwr$Date)
data1 <- filter(pwr, Date == "1/2/2007")
names(pwr)
data1 <- subset(pwr, Date == "1/2/2007")
library(dplyr)
data1 <- filter(pwr, Date == "1/2/2007")
data2 <- filter(pwr, Date == "2/2/2007")
set <- bind_rows(data1, data2)
set$Date <- dmy(set$Date)
library(dplyr)
library(lubridate)
set$Date <- dmy(set$Date)
hist(pwr$Global_active_power)
hist(pwr$Global_active_power, xlab = "Global Active Power (Kilowatts)", main = "Global Active Power", col = "red")
hist(pwr$Global_active_power, xlab = "Global Active Power (Kilowatts)", main = "Global Active Power", col = "red", scientific = FALSE)
format(hist(pwr$Global_active_power, xlab = "Global Active Power (Kilowatts)", main = "Global Active Power", col = "red"), scientific = FALSE)
hist(pwr$Global_active_power, xlab = "Global Active Power (Kilowatts)", main = "Global Active Power", col = "red")
options(scipen=999)
hist(pwr$Global_active_power, xlab = "Global Active Power (Kilowatts)", main = "Global Active Power", col = "red")
hist(set$Global_active_power, xlab = "Global Active Power (Kilowatts)", main = "Global Active Power", col = "red")
dev.copy(png, file = "plot1.png")
dev.off()
names(set)
plot(set$Date, set$Global_active_power)
?strptime
paste(set$Date, set$Time, sep = " ")
paste(set$Date[1], set$Time[1], sep = " ")
class(paste(set$Date[1], set$Time[1], sep = " "))
strptime(paste(set$Date[1], set$Time[1], sep = " "))
strptime(paste(set$Date[1], set$Time[1], sep = " "), format = "%Y-%m-%d %H:%M:%S")
strptime(paste(set$Date[1], set$Time[1], sep = ""), format = "%Y-%m-%d %H:%M:%S")
class(strptime(paste(set$Date[1], set$Time[1], sep = ""), format = "%Y-%m-%d %H:%M:%S"))
sample <- strptime(paste(set$Date[1], set$Time[1], sep = ""), format = "%Y-%m-%d %H:%M:%S")
?as.POSIXct
sample <- as.POSIXct(paste(set$Date[1], set$Time[1], sep = ""), format = "%Y-%m-%d %H:%M:%S")
sample
(paste(set$Date[1], set$Time[1], sep = ""), format = "%Y-%m-%d %H:%M:%S")
(paste(set$Date[1], set$Time[1], sep = "")
)
sample <- as.POSIXct(paste(set$Date[1], set$Time[1], sep = " "), format = "%Y-%m-%d %H:%M:%S")
sample
set$date_time <- as.POSIXct(paste(set$Date, set$Time, sep = " "), format = "%Y-%m-%d %H:$M:%S")
plot(set$date_time, set$Global_active_power)
class(set$date_time)
head(set$date_time)
set$date_time <- strptime(paste(set$Date, set$Time, sep = " "), format = "%Y-%m-%d %H:$M:%S")
head(set$date_time)
set$date_time <- as.POSIXct(paste(set$Date, set$Time, sep = " "), format = "%Y-%m-%d %H:%M:%S")
head(set$date_time)
plot(set$date_time, set$Global_active_power)
plot(set$date_time, set$Global_active_power, type = l)
plot(set$date_time, set$Global_active_power, type = "l")
plot(set$date_time, set$Global_active_power, type = "l", ylab = "Global Active Power (Kilowatts)")
plot(set$date_time, set$Global_active_power, type = "l", ylab = "Global Active Power (Kilowatts)", xlab = " ")
dev.copy(png, file = "plot2.png")
dev.off()
?plot
plot(set$date_time, set$Sub_metering_1)
plot(set$date_time, set$Sub_metering_1, type = "l")
lines(set$Sub_metering_2, type = "l")
lines(set$date_time, set$Sub_metering_2, type = "l")
lines(set$date_time, set$Sub_metering_2, type = "l", col = "red")
lines(set$date_time, set$Sub_metering_3, type = "l", col = "blue")
plot(set$date_time, set$Sub_metering_1, type = "l", xlab = " ", ylab = "Energy Sub Metering")
plot(set$date_time, set$Sub_metering_1, type = "l", xlab = " ", ylab = "Energy sub metering")
lines(set$date_time, set$Sub_metering_2, type = "l", col = "red")
lines(set$date_time, set$Sub_metering_3, type = "l", col = "blue")
?legend
names(set)
names(set)[7:10]
names(set)[7:9]
legend("topright", names(set)[7:9])
legend("topright", names(set)[7:9], lty = "l")
legend("topright", names(set)[7:9], lty = "2")
legend("topright", names(set)[7:9], col = c("black", "red", "blue"))
legend("topright", names(set)[7:9], col = c("black", "red", "blue"), lty = 1)
?mfrow
par(mfrow = c(2,2))
plot(set$date_time, set$Global_active_power, type = "l",
ylab = "Global Active Power (Kilowatts)", xlab = " ")
plot(set$date_time, set$Sub_metering_1, type = "l")
lines(set$date_time, set$Sub_metering_2, type = "l", col = "red")
lines(set$date_time, set$Sub_metering_3, type = "l", col = "blue")
legend("topright", names(set)[7:9],
col = c("black", "red", "blue"), lty = 1)
plot(set$date_time, set$Voltage, xlab = "date_time", ylab = "Voltage")
plot(set$date_time, set$Voltage, xlab = "date_time", ylab = "Voltage", type = "l")
plot(set$date_time, set$Global_active_power, type = "l",
ylab = "datetime", xlab = "Global Active Power")
plot(set$date_time, set$Global_reactive_power, type = "l",
ylab = "datetime", xlab = "Global Reactive Power")
plot(set$date_time, set$Global_reactive_power, type = "l",
xlab = "datetime", ylab = "Global Reactive Power")
plot(set$date_time, set$Global_reactive_power, type = "l",
xlab = "datetime", ylab = "Global Reactive Power")
plot(set$date_time, set$Global_active_power, type = "l",
ylab = "Global Active Power (Kilowatts)", xlab = " ")
plot(set$date_time, set$Voltage, xlab = "date_time",
ylab = "Voltage", type = "l")
plot(set$date_time, set$Sub_metering_1, type = "l",
xlab = " ", ylab = "Energy sub metering")
lines(set$date_time, set$Sub_metering_2, type = "l", col = "red")
lines(set$date_time, set$Sub_metering_3, type = "l", col = "blue")
legend("topright", names(set)[7:9],
col = c("black", "red", "blue"), lty = 1)
plot(set$date_time, set$Global_reactive_power, type = "l",
xlab = "datetime", ylab = "Global Reactive Power")
par(mfrow = c(2,2), mar = c(1,1,1,1))
plot(set$date_time, set$Global_active_power, type = "l",
ylab = "Global Active Power (Kilowatts)", xlab = " ")
plot(set$date_time, set$Global_active_power, type = "l",
ylab = "Global Active Power (Kilowatts)", xlab = " ")
plot(set$date_time, set$Global_active_power, type = "l",
ylab = "Global Active Power (Kilowatts)", xlab = " ")
plot(set$date_time, set$Global_active_power, type = "l",
ylab = "Global Active Power (Kilowatts)", xlab = " ")
par(mfrow = c(2,2), mar = c(2,2,2,2))
plot(set$date_time, set$Global_active_power, type = "l",
ylab = "Global Active Power (Kilowatts)", xlab = " ")
plot(set$date_time, set$Global_active_power, type = "l",
ylab = "Global Active Power (Kilowatts)", xlab = " ")
plot(set$date_time, set$Global_active_power, type = "l",
ylab = "Global Active Power (Kilowatts)", xlab = " ")
plot(set$date_time, set$Global_active_power, type = "l",
ylab = "Global Active Power (Kilowatts)", xlab = " ")
par(mfrow = c(2,2), mar = c(4,4,2,2))
plot(set$date_time, set$Global_active_power, type = "l",
ylab = "Global Active Power (Kilowatts)", xlab = " ")
plot(set$date_time, set$Voltage, xlab = "date_time",
ylab = "Voltage", type = "l")
plot(set$date_time, set$Sub_metering_1, type = "l",
xlab = " ", ylab = "Energy sub metering")
lines(set$date_time, set$Sub_metering_2, type = "l", col = "red")
lines(set$date_time, set$Sub_metering_3, type = "l", col = "blue")
legend("topright", names(set)[7:9],
col = c("black", "red", "blue"), lty = 1)
plot(set$date_time, set$Global_reactive_power, type = "l",
xlab = "date_time", ylab = "Global Reactive Power")
par(mfrow = c(2,2), mar = c(2,4,2,2))
plot(set$date_time, set$Global_active_power, type = "l",
ylab = "Global Active Power (Kilowatts)", xlab = " ")
plot(set$date_time, set$Voltage, xlab = "date_time",
ylab = "Voltage", type = "l")
plot(set$date_time, set$Sub_metering_1, type = "l",
xlab = " ", ylab = "Energy sub metering")
lines(set$date_time, set$Sub_metering_2, type = "l", col = "red")
lines(set$date_time, set$Sub_metering_3, type = "l", col = "blue")
legend("topright", names(set)[7:9],
col = c("black", "red", "blue"), lty = 1)
plot(set$date_time, set$Global_reactive_power, type = "l",
xlab = "date_time", ylab = "Global Reactive Power")
dev.copy(png, file = "plot3.png")
dev.off()
dev.copy(png, file = "plot4.png")
dev.off()
plot(set$date_time, set$Global_active_power, type = "l",
ylab = "Global Active Power (Kilowatts)", xlab = " ")
par(mfrow = c(2,2), mar = c(2,4,2,2))
plot(set$date_time, set$Global_active_power, type = "l",
ylab = "Global Active Power (Kilowatts)", xlab = " ")
plot(set$date_time, set$Voltage, xlab = "date_time",
ylab = "Voltage", type = "l")
plot(set$date_time, set$Sub_metering_1, type = "l",
xlab = " ", ylab = "Energy sub metering")
lines(set$date_time, set$Sub_metering_2, type = "l", col = "red")
lines(set$date_time, set$Sub_metering_3, type = "l", col = "blue")
legend("topright", names(set)[7:9],
col = c("black", "red", "blue"), lty = 1)
plot(set$date_time, set$Global_reactive_power, type = "l",
xlab = "date_time", ylab = "Global Reactive Power")
par(mfrow = c(2,2), mar = c(2,4,2,2))
plot(set$date_time, set$Global_active_power, type = "l",
ylab = "Global Active Power (Kilowatts)", xlab = " ")
plot(set$date_time, set$Voltage, xlab = "date_time",
ylab = "Voltage", type = "l")
plot(set$date_time, set$Sub_metering_1, type = "l",
xlab = " ", ylab = "Energy sub metering")
lines(set$date_time, set$Sub_metering_2, type = "l", col = "red")
lines(set$date_time, set$Sub_metering_3, type = "l", col = "blue")
legend("topright", names(set)[7:9],
col = c("black", "red", "blue"), lty = 1)
plot(set$date_time, set$Global_reactive_power, type = "l",
xlab = "date_time", ylab = "Global Reactive Power")
swirl()
library(swirl)
rm(list=ls())
swirl()
sample(colors(), 10)
pal <- colorRamp(c("red", "blue"))
pal(1)
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1 <- colorRampPalette(c("red","blue"))
p1(2)
p1(seq(0,1, len = 6))
p1(6)
0xcc
p2 <- colorRampPalette(c("red", "yellow")
)
p2(2)
p2(10)
View(showMe)
showMe(p1(20))
?deparse
showMe(p20)
showMe(p2(20)
)
showMe(p2(2))
p1
?fun
?rgb
p3 <- colorRampPalette(c("blue", "green", alpha = 0.5))
p3 <- colorRampPalette(c("blue", "green"), alpha = 0.5)
p3(5)
plot(x, y, pch = 19, col = rgb(0, 0.5, 0.5))
plot(x, y, pch = 19, col = rgb(0, 0.5, 0.5, 0.3))
brewer.pal(3, "BuGn")
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image("volcano", col = pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20)
)
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, col = drv)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(y = hwy, data = mpg, color = drv)
View(myhigh)
myhigh
qplot(drv, hwy, data = mpg, geom = boxplot)
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = .~drv)
qplot(hwy, data = mpg, facets = drv~., binwidth = 2)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv)
g <- ggplot(data = mpg, aes(displ, hwy))
g
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method = "lm")
g+geom_point()+geom_smooth(method = "lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method = "lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g + geom_point(color = "pink", size = 4, alpha = 0.5)
g + geom_point(color = drv, size = 4, alpha = 0.5)
g + geom_point(size = 4, alpha = 0.5, aes(color = drv))
g + geom_point(size = 4, alpha = 0.5, aes(color = drv)) + ggtitle("Swirl Rules!") labs(x = "Displacement", y = "Hwy Mileage")
)
g + geom_point(size = 4, alpha = 0.5, aes(color = drv)) + ggtitle("Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv)) + ggtitle("Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!", x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv), size = 2, alpha = 0.5) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color = drv)) theme_bw(base_family = "Times")
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(- myx, myy, type = "l", ylim = c(-3,3))
plot(myx, myy, type = "l", ylim = c(-3,3))
g <- ggplot(data = testdat, aes(x = myx, y = myy))
g + geom_line()
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(ylim = c(-3,3))
g <- ggplot(data = mpg, aes(x = displ, y = hwy, color = factor(year)))
g
g + geom_point()
g + geom_point() + facet_grid(drv~cyl, margins = TRUE)
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
